// <auto-generated />
using System;
using SkillForge.Entities.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace SkillForge.Entities.Migrations
{
    [DbContext(typeof(NorthwindContext))]
    partial class NorthwindContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SkillForge.Entities.Model.Category", b =>
                {
                    b.Property<int>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("category_id"));

                    b.Property<string>("category_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("created_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("modified_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("picture")
                        .HasColumnType("text");

                    b.HasKey("category_id");

                    b.ToTable("categories", "public");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Customer", b =>
                {
                    b.Property<string>("customer_id")
                        .HasColumnType("text");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<string>("company_name")
                        .HasColumnType("text");

                    b.Property<string>("contact_name")
                        .HasColumnType("text");

                    b.Property<string>("contact_title")
                        .HasColumnType("text");

                    b.Property<string>("country")
                        .HasColumnType("text");

                    b.Property<string>("fax")
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<string>("postal_code")
                        .HasColumnType("text");

                    b.Property<string>("region")
                        .HasColumnType("text");

                    b.HasKey("customer_id");

                    b.ToTable("customers", "public");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.CustomerDemographic", b =>
                {
                    b.Property<string>("CustomerTypeId")
                        .HasColumnType("text");

                    b.Property<string>("CustomerDesc")
                        .HasColumnType("text");

                    b.HasKey("CustomerTypeId");

                    b.ToTable("CustomerDemographics");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Employee", b =>
                {
                    b.Property<int>("employee_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("employee_id"));

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<DateTime>("birth_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<string>("country")
                        .HasColumnType("text");

                    b.Property<string>("extension")
                        .HasColumnType("text");

                    b.Property<string>("first_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("hire_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("home_phone")
                        .HasColumnType("text");

                    b.Property<string>("last_name")
                        .HasColumnType("text");

                    b.Property<string>("notes")
                        .HasColumnType("text");

                    b.Property<byte[]>("photo")
                        .HasColumnType("bytea");

                    b.Property<string>("photo_path")
                        .HasColumnType("text");

                    b.Property<string>("postal_code")
                        .HasColumnType("text");

                    b.Property<string>("region")
                        .HasColumnType("text");

                    b.Property<int?>("reports_to")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.Property<string>("title_of_courtesy")
                        .HasColumnType("text");

                    b.HasKey("employee_id");

                    b.ToTable("employees", "public");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Order", b =>
                {
                    b.Property<int>("order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("order_id"));

                    b.Property<string>("customer_id")
                        .HasColumnType("text");

                    b.Property<int>("employee_id")
                        .HasColumnType("integer");

                    b.Property<double>("freight")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("order_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("required_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ship_address")
                        .HasColumnType("text");

                    b.Property<string>("ship_city")
                        .HasColumnType("text");

                    b.Property<string>("ship_country")
                        .HasColumnType("text");

                    b.Property<string>("ship_name")
                        .HasColumnType("text");

                    b.Property<string>("ship_postal_code")
                        .HasColumnType("text");

                    b.Property<string>("ship_region")
                        .HasColumnType("text");

                    b.Property<int>("ship_via")
                        .HasColumnType("integer");

                    b.Property<DateTime>("shipped_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("order_id");

                    b.HasIndex("customer_id");

                    b.HasIndex("employee_id");

                    b.HasIndex("ship_via");

                    b.ToTable("orders", "public");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.OrderDetail", b =>
                {
                    b.Property<int>("order_id")
                        .HasColumnType("integer");

                    b.Property<int>("product_id")
                        .HasColumnType("integer");

                    b.Property<double>("discount")
                        .HasColumnType("double precision");

                    b.Property<short>("quantity")
                        .HasColumnType("smallint");

                    b.Property<double>("unit_price")
                        .HasColumnType("double precision");

                    b.HasKey("order_id", "product_id");

                    b.HasIndex("product_id");

                    b.ToTable("order_details", "public");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Product", b =>
                {
                    b.Property<int>("product_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("product_id"));

                    b.Property<int>("category_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("discontinued")
                        .HasColumnType("integer");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("modified_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("product_name")
                        .HasColumnType("text");

                    b.Property<string>("quantity_per_unit")
                        .HasColumnType("text");

                    b.Property<int>("reorder_level")
                        .HasColumnType("integer");

                    b.Property<int>("supplier_id")
                        .HasColumnType("integer");

                    b.Property<double>("unit_price")
                        .HasColumnType("double precision");

                    b.Property<int>("units_in_stock")
                        .HasColumnType("integer");

                    b.Property<int>("units_on_order")
                        .HasColumnType("integer");

                    b.HasKey("product_id");

                    b.HasIndex("category_id");

                    b.HasIndex("supplier_id");

                    b.ToTable("products", "public");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegionId"));

                    b.Property<string>("RegionDescription")
                        .HasColumnType("text");

                    b.HasKey("RegionId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Shipper", b =>
                {
                    b.Property<int>("shipper_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("shipper_id"));

                    b.Property<string>("company_name")
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.HasKey("shipper_id");

                    b.ToTable("shippers", "public");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Supplier", b =>
                {
                    b.Property<int>("supplier_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("supplier_id"));

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<string>("company_name")
                        .HasColumnType("text");

                    b.Property<string>("contact_name")
                        .HasColumnType("text");

                    b.Property<string>("contact_title")
                        .HasColumnType("text");

                    b.Property<string>("country")
                        .HasColumnType("text");

                    b.Property<string>("fax")
                        .HasColumnType("text");

                    b.Property<string>("homepage")
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<string>("postal_code")
                        .HasColumnType("text");

                    b.Property<string>("region")
                        .HasColumnType("text");

                    b.HasKey("supplier_id");

                    b.ToTable("suppliers", "public");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Territory", b =>
                {
                    b.Property<string>("TerritoryID")
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<string>("TerritoryDescription")
                        .HasColumnType("text");

                    b.HasKey("TerritoryID");

                    b.HasIndex("RegionId");

                    b.ToTable("Territories");
                });

            modelBuilder.Entity("CustomerCustomerDemographic", b =>
                {
                    b.Property<string>("CustomerTypesCustomerTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Customerscustomer_id")
                        .HasColumnType("text");

                    b.HasKey("CustomerTypesCustomerTypeId", "Customerscustomer_id");

                    b.HasIndex("Customerscustomer_id");

                    b.ToTable("CustomerCustomerDemographic");
                });

            modelBuilder.Entity("EmployeeTerritories", b =>
                {
                    b.Property<string>("employee_id")
                        .HasColumnType("text");

                    b.Property<int>("territory_id")
                        .HasColumnType("integer");

                    b.HasKey("employee_id", "territory_id");

                    b.HasIndex("territory_id");

                    b.ToTable("EmployeeTerritories");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Employee", b =>
                {
                    b.HasOne("SkillForge.Entities.Model.Employee", "ReportsToNavigation")
                        .WithMany("InverseReportsToNavigation")
                        .HasForeignKey("employee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportsToNavigation");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Order", b =>
                {
                    b.HasOne("SkillForge.Entities.Model.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("customer_id");

                    b.HasOne("SkillForge.Entities.Model.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("employee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillForge.Entities.Model.Shipper", "Shipper")
                        .WithMany("Orders")
                        .HasForeignKey("ship_via")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.OrderDetail", b =>
                {
                    b.HasOne("SkillForge.Entities.Model.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillForge.Entities.Model.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Product", b =>
                {
                    b.HasOne("SkillForge.Entities.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillForge.Entities.Model.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("supplier_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Territory", b =>
                {
                    b.HasOne("SkillForge.Entities.Model.Region", "Region")
                        .WithMany("Territories")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("CustomerCustomerDemographic", b =>
                {
                    b.HasOne("SkillForge.Entities.Model.CustomerDemographic", null)
                        .WithMany()
                        .HasForeignKey("CustomerTypesCustomerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillForge.Entities.Model.Customer", null)
                        .WithMany()
                        .HasForeignKey("Customerscustomer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeTerritories", b =>
                {
                    b.HasOne("SkillForge.Entities.Model.Territory", null)
                        .WithMany()
                        .HasForeignKey("employee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillForge.Entities.Model.Employee", null)
                        .WithMany()
                        .HasForeignKey("territory_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Employee", b =>
                {
                    b.Navigation("InverseReportsToNavigation");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Region", b =>
                {
                    b.Navigation("Territories");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Shipper", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SkillForge.Entities.Model.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
