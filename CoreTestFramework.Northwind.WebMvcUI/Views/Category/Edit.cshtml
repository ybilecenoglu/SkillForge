@model CategoryViewModel
@{
ViewBag.Title = "Kategori Düzenle";
}
<div class="row">
    <div class="col-md-12">
        <div class="card card-primary">
            <!-- <div class="card-header">
    <h3 class="card-title">@ViewBag.Title</h3>
    </div> -->
            <form id="edit-category">
                @Html.AntiForgeryToken()
                <div class="card-body">
                    <input type="hidden" asp-for="@Model.Category.category_id" class="form-control" />
                    <div class="form-group">
                        <label>Kategori Adı</label>
                        <input asp-for="@Model.Category.category_name" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Açıklama</label>
                        <input asp-for="@Model.Category.description" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Kategori Resmi:</label><br />
                        @if(Model.Category.picture != null)
                        {
                        <img src="@Model.Category.picture" id="category_img" style="max-width:200px"
                            class="img-fluid img-thumbnail" />
                        }
                        else{
                        <img src="/adminlte/dist/img/default-150x150.png" id="category_img" style="max-width:200px"
                            class="img-fluid img-thumbnail" />
                        }

                    </div>
                    <div class="form-group">
                        <label>Resim Ekle: </label>
                        <div id="upload-files" name="uploadFiles[]"></div>
                    </div>
                </div>
                <div class="card-footer">
                    <button type="button" class="btn btn-primary" id="submit-button">Kaydet</button>
                    <button type="button" class="btn btn-outline-light" data-dismiss="modal">Kapat</button>
                </div>
            </form>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        window.FU = {};
        var endPoint = '/Category/UploadFile';
        var requestParams = {
            plugin: "FineUploader"// Send a plugin param or set Fine Uploader in Web.Backload.config as the default client plugin
        };
        var options = {
            debug: false,
            multiple: false,
            template: 'qq-template',
            showPrompt: function (message, defaultValue) { window.prompt(message, defaultValue); },
            request: {
                endpoint: endPoint,
                paramsInBody: false,
                params: requestParams
            },
            session: {// Initial GET request to load existing files
                endpoint: endPoint,
                params: requestParams
            },
            deleteFile: {
                enabled: true,
                forceConfirm: true,
                method: 'POST',
                confirmMessage: "{filename} silmek istediğinizden emin misiniz? ",
                deletingStatusText: "Siliyor...",
                deletingFailedText: "Silinemedi",
                endpoint: '/Category/DeleteFile',
                params: requestParams
            },
            retry: {
                enableAuto: true,
                showAutoRetryNote: true,
                autoRetryNote: "Tekrar Deniyor {retryNum}/{maxAuto}..."
            },
            chunking: {
                enabled: false,
            },
            callbacks: {
                onStatusChange: function (id, oldStatus, newStatus) {
                    // This will check to see if a file that has been cancelled
                    // would equate to all uploads being 'completed'.

                    if (newStatus === qq.status.CANCELLED) {
                        if (window.FU.allUploadsCompleted(this) === true) {
                            $('#kaydet-kayit').prop('disabled', false);
                        }
                    }
                },
                onSessionRequestComplete: function (response, success, xhrOrXdr) {
                    // Sort Initial File List Form
                    if ((success) && (response !== undefined)) {
                    }
                },
                onComplete: function (id, name, responseJSON, xhr) {
                    // Set the deleteFileEndpoint adress
                    if ((responseJSON) && (responseJSON.success)) {
                        this.setDeleteFileEndpoint(responseJSON.deleteFileEndpoint, id);
                        
                        var imgInput = document.getElementById('category_img'); // <img> elementi
                        imgInput.src = responseJSON.fileUrl; // yeni resmi göster
                        document.getElementsByClassName("qq-upload-file").text = responseJSON.fileName;
                        this.setName(id, responseJSON.fileName);
                    }
                },
                onAllComplete: function (succeeded, failed) {
                    if (window.FU.allUploadsCompleted(this) === true) {
                        $('#kaydet-kayit').prop('disabled', false);
                    }
                },
                onSubmitted: function (id, oldStatus, newStatus) {
                    $('#kaydet-kayit').prop('disabled', true);
                },
                onSubmitDelete: function (id) {
                    this.setDeleteFileParams({ filename: this.getName(id) }, id);
                },
                onDeleteComplete: function (id, xhr, isError) {
                    if (window.FU.allUploadsDeleted(this) === true) {
                        $('#kaydet-kayit').prop('disabled', true);
                    }
                },
                onSubmit: function (id, name) {
                    if (id === undefined) return;
                    var _file = this.getFile(id);
                },
                onValidate: function (data) {
                    if (data != undefined && data.name != undefined) {
                        if (data.name.length > 100) {
                            console.log(data.name.length);
                            ShowModal('Hata', 'Dosya adı uzunluğu 100\'den fazla olamaz!');
                            return false;
                        }
                    }
                }
            },
            resume: {
                enabled: true
            },
            thumbnails: {
                placeholders: {
                    waitingPath: '/wwwroot/fine-uploader/placeholders/waiting-generic.png',
                    notAvailablePath: '/wwwroot/fine-uploader/placeholders/not_available-generic.png'
                }
            },
            validation: {
                itemLimit: 3,
                allowedExtensions: ['BMP', 'GIF', 'JPEG', 'JPG', 'PNG', 'PDF', 'TIF', 'XML'],
                acceptFiles: ".BMP,.GIF,.JPEG,.JPG,.PDF,.PNG,.TIF,.XML,"
            },
            text: {
                formatProgress: "{percent}% - {total_size}",
                failUpload: "Yükleme başarısız",
                waitingForResponse: "İşleniyor...",
                paused: "Duraklatıldı",
                defaultResponseError: "Sebebi bilinmeyen yükleme hatası",
                fileInputTitle: "Yüklenecek dosyayı seç",
            },
            messages: {
                typeError: "{file} Dosya türüne izin verilmiyor. İzin verilen dosya türleri: {extensions}.",
                sizeError: "{file} Dosya çok büyük. İzin verilen azami dosya boyutu: {sizeLimit}.",
                minSizeError: "{file} Dosya çok küçük. İzin verilen asgari dosya boyutu: {minSizeLimit}.",
                emptyError: "{file} Dosya boş. Bu dosyayı seçmeyiniz.",
                noFilesError: "Yüklenecek dosya yok.",
                tooManyItemsError: "İzin verilenden ({itemLimit}) daha fazla dosya ({netItems}) ekleyemezsiniz.",
                maxHeightImageError: "Resim çok uzun.",
                maxWidthImageError: "Resim çok geniş.",
                minHeightImageError: "Resim yeterince uzun değil.",
                minWidthImageError: "Resim yeterince geniş değil.",
                retryFailTooManyItems: "Tekrar deneme başarısız - Dosya limitine ulaştınız.",
                onLeave: "Yüklenmekte olan dosyalar var. Eğer şimdi çıkarsanız dosyaların yüklenmesi iptal edilecek.",
                unsupportedBrowserIos8Safari: "Hata - Bu tarayıcı iOS8 Safari'deki ciddi hatalar sebebiyle dosya yüklemeye izin vermiyor. Lütfen, Apple bu problemi çözene kadar iOS8 Chrome kullanın."
            },
        };

        options.element = document.getElementById('upload-files');
        window.FU.uploader_files = new qq.FineUploader(options);
        window.FU.allUploadsCompleted = function (uploader) {
            // If and only if all of Fine Uploader's uploads are in a state of
            // completion will this function fire the provided callback.

            // If there are 0 uploads in progress...
            if (uploader.getInProgress() === 0) {
                var failedUploads = uploader.getUploads({ status: qq.status.UPLOAD_FAILED });
                // ... and none have failed
                if (failedUploads.length === 0) {
                    // They all have completed.

                    return true;
                }
            }
            return false;
        }
        window.FU.allUploadsDeleted = function (uploader) {
            // If and only if all of Fine Uploader's uploads are in a state of
            // completion will this function fire the provided callback.

            // If there are 0 uploads in progress...
            if (uploader.getUploads().length === uploader.getUploads({ status: qq.status.DELETED }).length) {
                return true;
            }
            return false;
        }

        $('#submit-button').on('click', function (e) {
            var form_data = $('#edit-category').serializeArray();
            var modal = $('#modal-category');
            $('#overlay-process').fadeIn();
            $('#submit-button').prop('disabled', true);
            var uploads_file = window.FU.uploader_files.getUploads({ status: qq.status.UPLOAD_SUCCESSFUL });
            form_data.push({ name: "uploadFiles", value: uploads_file });

            var json = {};
            jQuery.each(form_data, function () {
                json[this.name] = this.value || '';
            });

            $.ajax({
                type: 'POST',
                url: '@Url.Action("Edit","Category")',
                data: json,
                traditional: false
            }).done(function (result) {
                if (result.Success == true) {
                    $('#modal-overlay .modal-content').addClass("bg-success");
                    ShowModal('Başarılı', result.Message, function () {
                        $("#data-table-category").DataTable().ajax.reload(null, false);
                        $('#modal-overlay .modal-content').removeClass("bg-success");
                    });
                }
                else {
                    $('#modal-overlay .modal-content').addClass("bg-danger");
                    ShowModal('Hata', result.Messages, function () {
                        $('#modal-overlay .modal-content').removeClass("bg-danger");
                    });
                }
            }).always(function () {
                $('#overlay-process').fadeOut();
                $('#submit-button').prop('disabled', false);
                modal.modal('hide');
            });
            e.preventDefault();
        });
    });
</script>